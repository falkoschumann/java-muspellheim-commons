import com.github.spotbugs.SpotBugsTask

import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.spotbugs' version '2.0.0'
    id 'io.freefair.lombok' version '4.1.2'
}

version = '1.0.0-beta'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    jcenter()
}

dependencies {
    compile 'org.postgresql:postgresql:42.2.8'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

// ###################################################################
// Java Library
// ###################################################################

jar {
    manifest {
        attributes 'Implementation-Title': 'Muspellheim Commons'
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor': 'Falko Schumann'
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
}

javadoc {
    title = "Muspellheim Commons v${project.version}"
    options.links += 'https://docs.oracle.com/javase/8/docs/api/'
    options.overview = file('src/main/docs/overview.html')
    options.noTimestamp = true
    destinationDir = file('docs')
}
build.dependsOn += javadoc

// ###################################################################
// Checkstyle
// ###################################################################

checkstyle {
    toolVersion '8.24'
}

// ###################################################################
// Jacoco
// ###################################################################

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            element = 'METHOD'
            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                maximum = 10
            }
        }
    }
}
check.dependsOn += [jacocoTestCoverageVerification, jacocoTestReport]

// ###################################################################
// SpotBugs
// ###################################################################

spotbugs {
    excludeFilter = file("$rootDir/config/spotbugs/excludeFilter.xml")
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = false
        text.enabled = true
    }
}

task printSpotBugsReportMain() {
    doLast {
        printSpotBugsReport('main')
    }
}
spotbugsMain.finalizedBy printSpotBugsReportMain

task printSpotBugsReportTest() {
    doLast {
        printSpotBugsReport('test')
    }
}
spotbugsTest.finalizedBy printSpotBugsReportTest

static def printSpotBugsReport(String sourceSet) {
    def report = Paths.get("build/reports/spotbugs/${sourceSet}.text")
    if (Files.exists(report)) {
        def lines = Files.readAllLines(report)
        lines.forEach { l -> println(l) }
    }
}

// ###################################################################
// Lombok
// ###################################################################

lombok {
    config['lombok.nonNull.exceptionType'] = 'Jdk'
}
